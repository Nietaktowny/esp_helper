<testsuites><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="1" time="0.175" timestamp="2024-02-23T11:23:48.276839" hostname="wmytych"><testcase classname="test_logger.pytest_logger" name="test_logger" time="0.084"><error message="failed on setup with &quot;ValueError: QEMU image path doesn't exist: /home/wmytych/Projects/esp_helper/projects/lib_tests/test_logger/build/flash_image.bin&quot;">args = ()
kwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': &lt;class 'pytest_embedded.app.App'&gt;, 'qemu': &lt;class 'py...t_app_cache={}, logfile_extension='.log'), 'qemu': None}})), 'app': &lt;pytest_embedded.app.App object at 0x7fe225aae4d0&gt;}
_close_or_terminate = &lt;function multi_dut_generator_fixture.&lt;locals&gt;.wrapper.&lt;locals&gt;._close_or_terminate at 0x7fe225aa3b00&gt;, res = None

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        def _close_or_terminate(obj):
            if obj is None:
                del obj
                return
    
            try:
                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):
                    obj.terminate()
                    obj.kill()
                elif isinstance(obj, io.IOBase):
                    try:
                        obj.close()
                    except Exception as e:
                        logging.debug('file %s closed failed with error: %s', obj, str(e))
                else:
                    try:
                        obj.close()
                    except AttributeError:
                        try:
                            obj.terminate()
                        except AttributeError:
                            pass
                    except Exception as e:
                        logging.debug('Not properly caught object %s: %s', obj, str(e))
            except Exception as e:
                logging.debug('%s: %s', obj, str(e))
                return  # swallow up all error
            finally:
                referrers = gc.get_referrers(obj)
                for _referrer in referrers:
                    if isinstance(_referrer, list):
                        for _i, val in enumerate(_referrer):
                            if val is obj:
                                _referrer[_i] = None
                    elif isinstance(_referrer, dict):
                        for key, value in _referrer.items():
                            if value is obj:
                                _referrer[key] = None
                del obj
    
        if _COUNT == 1:
            res = None
            try:
&gt;               res = func(*args, **kwargs)

../../../../.espressif/python_env/idf5.3_py3.11_env/lib/python3.11/site-packages/pytest_embedded/plugin.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.espressif/python_env/idf5.3_py3.11_env/lib/python3.11/site-packages/pytest_embedded/plugin.py:1394: in qemu
    return cls(**_drop_none_kwargs(kwargs))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;[AttributeError("'Qemu' object has no attribute 'returncode'") raised in repr()] Qemu object at 0x7fe225aaeb50&gt;
qemu_image_path = '/home/wmytych/Projects/esp_helper/projects/lib_tests/test_logger/build/flash_image.bin', qemu_prog_path = None, qemu_cli_args = None, qemu_extra_args = None
app = &lt;pytest_embedded.app.App object at 0x7fe225aae4d0&gt;
kwargs = {'dut_index': 1, 'meta': Meta(logdir='/tmp/pytest-embedded/2024-02-23_10-23-48-319579/test_logger', port_target_cache=...port_app_cache={}, logfile_extension='.log'), 'msg_queue': &lt;pytest_embedded.log.MessageQueue object at 0x7fe225aa63d0&gt;}
image_path = '/home/wmytych/Projects/esp_helper/projects/lib_tests/test_logger/build/flash_image.bin'

    def __init__(
        self,
        qemu_image_path: t.Optional[str] = None,
        qemu_prog_path: t.Optional[str] = None,
        qemu_cli_args: t.Optional[str] = None,
        qemu_extra_args: t.Optional[str] = None,
        app: t.Optional['QemuApp'] = None,
        **kwargs,
    ):
        """
        Args:
            qemu_image_path: QEMU image path
            qemu_prog_path: QEMU program path
            qemu_cli_args: QEMU CLI arguments
            qemu_extra_args: QEMU CLI extra arguments, will be appended to `qemu_cli_args`
        """
        self.app = app
    
        image_path = qemu_image_path or DEFAULT_IMAGE_FN
        if not os.path.exists(image_path):
&gt;           raise ValueError(f'QEMU image path doesn\'t exist: {image_path}')
E           ValueError: QEMU image path doesn't exist: /home/wmytych/Projects/esp_helper/projects/lib_tests/test_logger/build/flash_image.bin

../../../../.espressif/python_env/idf5.3_py3.11_env/lib/python3.11/site-packages/pytest_embedded_qemu/qemu.py:54: ValueError</error></testcase></testsuite></testsuites>